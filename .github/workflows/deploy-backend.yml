name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - "backend/Dockerfile"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get GitHub Actions runner public IP
        id: get_runner_ip
        run: echo "RUNNER_IP=$(curl -s ifconfig.me)" >> $GITHUB_ENV

      - name: Allow SSH from GitHub Actions runner
        run: |
          aws ec2 authorize-security-group-ingress \
            --region ${{ secrets.AWS_REGION }} \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${RUNNER_IP}/32

      - name: Build and Push Docker image
        run: |
          ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
          IMAGE_TAG=${{ github.sha }}
          docker build --no-cache -t $ECR_REGISTRY/chatterbox-backend:$IMAGE_TAG \
                                  -t $ECR_REGISTRY/chatterbox-backend:latest \
                                  ./backend
          docker push $ECR_REGISTRY/chatterbox-backend:$IMAGE_TAG
          docker push $ECR_REGISTRY/chatterbox-backend:latest

      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/chatterbox_deploy
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            ECR_REGISTRY=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            IMAGE_TAG=${{ github.sha }}
            sed -i "s|image:.*chatterbox-backend:.*|image: $ECR_REGISTRY/chatterbox-backend:$IMAGE_TAG|g" docker-compose.yml
            docker pull $ECR_REGISTRY/chatterbox-backend:$IMAGE_TAG
            docker-compose down
            docker-compose up -d --remove-orphans
            docker images $ECR_REGISTRY/chatterbox-backend --format "{{.ID}} {{.CreatedAt}}" | sort -rk 2 | awk 'NR>3{print $1}' | xargs -r docker rmi || true


      - name: Remove SSH rule after deployment
        run: |
          aws ec2 revoke-security-group-ingress \
            --region ${{ secrets.AWS_REGION }} \
            --group-id ${{ secrets.EC2_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 22 \
            --cidr ${RUNNER_IP}/32
